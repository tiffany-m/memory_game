* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

body {
  background-color: rgb(199, 206, 211);  
  height: 100vh;
  overflow: hidden;
  margin: 0;
}

.screen {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  width: 100vw;
  transition: margin 1s ease-out;
}
.screen.up {
  margin-top: -100vh;
}

/* Title Screen ------------------------------------------------------------------------------ */
.jumbotron {
  margin: auto;
  text-align: center;
}

.title {
  font-size: 45px;
  font-family: 'Patrick Hand', cursive;
}

.shiba {
  margin: 0 10px;
}

/* Buttons ----------------------------------------------------------------------------------- */
#start {
  margin: 20px auto;
}
#reset {
  margin: 0 20px;
}
#start, #reset {
  background-color: rgb(12, 213, 231);
  padding: 8px 15px;
  font-size: 25px;
  border: 2px solid black;
  border-radius: 5px;
  font-family: 'Patrick Hand', cursive;
  font-weight: bold;
}
#reset:active, #start:active {
  transform: scale(.97);
  background-color: rgb(11, 191, 207);
}

/* Game Board Screen ---------------------------------------------------------------------------- */
.memory-game {
  display: flex;
  flex-wrap: wrap;
  perspective: 1000px;
  /* part1: gives depth to elements for 3D effect */
}
 @media (min-width: 1200px) {
  .memory-game {
    width: 30%;
  } 
}

.memory-card {
  width: calc(25% - 10px);
  position: relative;
  margin: 5px;
  transform: scale(1);
  transform-style: preserve-3d;
  /* part2: inserts memory card element inside 3D space which is create in the memory game container */
  transition: transform .5s;
}
 @media (max-width: 601px) {
.memory-card {
  margin: 3px;
}
}
.memory-card:after {
  content: "";
  display: block;
  padding-top: 100%;
}
/* https://www.sodawebmedia.com/blog/create-responsive-square-css/
By making use of the padding-top, we can create a perfect square, 
also took away memory-game and memory-card height away to make responsive */
.memory-card:active {
  transform: scale(.95);
  transition: transform .2s;
}
.memory-card.flip {
  transform: rotateY(180deg);
}

.front-face, .back-face {
  width: 100%;
  height: 100%;
  position: absolute;
  border-radius: 10px;
  border: 2px solid black;
  backface-visibility: hidden;
}  
/* The backface-visibility property defines whether or not the back face of an element should be visible when facing the user.  The back face of an element is a mirror image of the front face being displayed. */
.front-face {
  transform: rotateY(180deg);
}

.functions {
  display: flex;
  margin-top: 20px;
}

#score, #time {
  padding: 8px 15px;
  font-size: 25px;
  border: 2px solid black;
  border-radius: 5px;
  font-family: 'Patrick Hand', cursive;
  font-weight: bold;
  margin: 0 20px;
}

#score {
  background-color: #DA9AFA;
}

#time {
  background-color: #13FBDC;
}